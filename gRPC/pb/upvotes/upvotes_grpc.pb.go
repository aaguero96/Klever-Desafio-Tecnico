// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: gRPC/proto/upvotes.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteServiceClient is the client API for UpvoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteServiceClient interface {
	Create(ctx context.Context, in *NewVote, opts ...grpc.CallOption) (*Vote, error)
	Read(ctx context.Context, in *FilterComment, opts ...grpc.CallOption) (*Votes, error)
	ReadById(ctx context.Context, in *VoteId, opts ...grpc.CallOption) (*Vote, error)
	Update(ctx context.Context, in *UpdateVote, opts ...grpc.CallOption) (*VoteId, error)
	Delete(ctx context.Context, in *VoteId, opts ...grpc.CallOption) (*VoteId, error)
	ReportByServiceId(ctx context.Context, in *ServiceId, opts ...grpc.CallOption) (*Report, error)
	ComementsByServiceId(ctx context.Context, in *ServiceId, opts ...grpc.CallOption) (*Comments, error)
}

type upvoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteServiceClient(cc grpc.ClientConnInterface) UpvoteServiceClient {
	return &upvoteServiceClient{cc}
}

func (c *upvoteServiceClient) Create(ctx context.Context, in *NewVote, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) Read(ctx context.Context, in *FilterComment, opts ...grpc.CallOption) (*Votes, error) {
	out := new(Votes)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) ReadById(ctx context.Context, in *VoteId, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/ReadById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) Update(ctx context.Context, in *UpdateVote, opts ...grpc.CallOption) (*VoteId, error) {
	out := new(VoteId)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) Delete(ctx context.Context, in *VoteId, opts ...grpc.CallOption) (*VoteId, error) {
	out := new(VoteId)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) ReportByServiceId(ctx context.Context, in *ServiceId, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/ReportByServiceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) ComementsByServiceId(ctx context.Context, in *ServiceId, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/proto.UpvoteService/ComementsByServiceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpvoteServiceServer is the server API for UpvoteService service.
// All implementations must embed UnimplementedUpvoteServiceServer
// for forward compatibility
type UpvoteServiceServer interface {
	Create(context.Context, *NewVote) (*Vote, error)
	Read(context.Context, *FilterComment) (*Votes, error)
	ReadById(context.Context, *VoteId) (*Vote, error)
	Update(context.Context, *UpdateVote) (*VoteId, error)
	Delete(context.Context, *VoteId) (*VoteId, error)
	ReportByServiceId(context.Context, *ServiceId) (*Report, error)
	ComementsByServiceId(context.Context, *ServiceId) (*Comments, error)
	mustEmbedUnimplementedUpvoteServiceServer()
}

// UnimplementedUpvoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteServiceServer struct {
}

func (UnimplementedUpvoteServiceServer) Create(context.Context, *NewVote) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUpvoteServiceServer) Read(context.Context, *FilterComment) (*Votes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedUpvoteServiceServer) ReadById(context.Context, *VoteId) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadById not implemented")
}
func (UnimplementedUpvoteServiceServer) Update(context.Context, *UpdateVote) (*VoteId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUpvoteServiceServer) Delete(context.Context, *VoteId) (*VoteId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUpvoteServiceServer) ReportByServiceId(context.Context, *ServiceId) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportByServiceId not implemented")
}
func (UnimplementedUpvoteServiceServer) ComementsByServiceId(context.Context, *ServiceId) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComementsByServiceId not implemented")
}
func (UnimplementedUpvoteServiceServer) mustEmbedUnimplementedUpvoteServiceServer() {}

// UnsafeUpvoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteServiceServer will
// result in compilation errors.
type UnsafeUpvoteServiceServer interface {
	mustEmbedUnimplementedUpvoteServiceServer()
}

func RegisterUpvoteServiceServer(s grpc.ServiceRegistrar, srv UpvoteServiceServer) {
	s.RegisterService(&UpvoteService_ServiceDesc, srv)
}

func _UpvoteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).Create(ctx, req.(*NewVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).Read(ctx, req.(*FilterComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_ReadById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).ReadById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/ReadById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).ReadById(ctx, req.(*VoteId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).Update(ctx, req.(*UpdateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).Delete(ctx, req.(*VoteId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_ReportByServiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).ReportByServiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/ReportByServiceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).ReportByServiceId(ctx, req.(*ServiceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_ComementsByServiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).ComementsByServiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpvoteService/ComementsByServiceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).ComementsByServiceId(ctx, req.(*ServiceId))
	}
	return interceptor(ctx, in, info, handler)
}

// UpvoteService_ServiceDesc is the grpc.ServiceDesc for UpvoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UpvoteService",
	HandlerType: (*UpvoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UpvoteService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _UpvoteService_Read_Handler,
		},
		{
			MethodName: "ReadById",
			Handler:    _UpvoteService_ReadById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UpvoteService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UpvoteService_Delete_Handler,
		},
		{
			MethodName: "ReportByServiceId",
			Handler:    _UpvoteService_ReportByServiceId_Handler,
		},
		{
			MethodName: "ComementsByServiceId",
			Handler:    _UpvoteService_ComementsByServiceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/upvotes.proto",
}
